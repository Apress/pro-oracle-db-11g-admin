#!/bin/bash
HOLDSID=${1}  # SID name
PRG=`basename $0`
USAGE="Usage: ${PRG} <database name> "
if [ -z "${HOLDSID}" ]; then
   echo "${USAGE}"
   exit 1
fi
#----------------------------------------------
# source environment variables (see Chapter 2 for details on oraset)
. /var/opt/oracle/oraset $HOLDSID
BOX=`uname -a | awk '{print$2}'`
MAILX='/bin/mailx'
MAIL_LIST='larry@oracle.com'
NLS_DATE_FORMAT='dd-mon-yy hh24:mi:ss'
date
#----------------------------------------------
LOCKFILE=/tmp/$PRG.lock
if [ -f $LOCKFILE ]; then
  echo "lock file exists, exiting..."
  exit 1
else
  echo "DO NOT REMOVE, $LOCKFILE" > $LOCKFILE
fi
#----------------------------------------------
rman nocatalog <<EOF
connect target /
set echo on;
show all;
# Synchronize RMAN with files on OS
crosscheck backup;
crosscheck copy;
crosscheck archivelog all;
# Configure environment, redundant to run each time, but ensures set correctly.
configure controlfile autobackup on;
configure controlfile autobackup format for device type disk to '/oradump01/DWREP/rman/rman_ctl_%F.bk';
configure retention policy to redundancy 1;
configure           device type disk parallelism 5;
configure channel 1 device type disk format '/ora08/DWREP/rman/rman1_%U.bk';
configure channel 2 device type disk format '/ora08/DWREP/rman/rman2_%U.bk';
configure channel 3 device type disk format '/ora08/DWREP/rman/rman3_%U.bk';
configure channel 4 device type disk format '/ora09/DWREP/rman/rman4_%U.bk';
configure channel 5 device type disk format '/ora09/DWREP/rman/rman5_%U.bk';
# Backup datafiles, archive redo logs, and control file
backup as compressed backupset incremental level=0 database plus archivelog;
# Delete obsolete backups and archive logs as defined by retention policy.
delete noprompt obsolete;
EOF
#----------------------------------------------
if [ $? -ne 0 ]; then
  echo "RMAN problem..."
  echo "Check RMAN backups" | $MAILX -s "RMAN issue: $ORACLE_SID on $BOX" $MAIL_LIST
else
  echo "RMAN ran okay..."
fi
#----------------------------------------------
sqlplus -s /nolog <<EOF
connect / as sysdba;
alter database backup controlfile to trace;
COL dbid NEW_VALUE hold_dbid
SELECT dbid FROM v\$database;
exec dbms_system.ksdwrt(2,'DBID: '||TO_CHAR(&hold_dbid));
EXIT
EOF
#----------------------------------------------
if [ -f $LOCKFILE ]; then
  rm $LOCKFILE
fi
#----------------------------------------------
date
exit 0
